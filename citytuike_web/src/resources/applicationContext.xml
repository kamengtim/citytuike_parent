<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!--1 引入属性文件，在配置中占位使用 -->
	<context:property-placeholder location="classpath*:db.properties"/><!-- ignore-unresolvable="true"-->

	<!--2 配置C3P0数据源 -->
	<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!--驱动类名 -->
		<property name="driverClass" value="${mysql.driver}" />
		<!-- url -->
		<property name="jdbcUrl" value="${mysql.url}" />
		<!-- 用户名 -->
		<property name="user" value="${mysql.uid}" />
		<!-- 密码 -->
		<property name="password" value="${mysql.password}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数 -->
		<property name="acquireIncrement" value="${mysql.acquireIncrement}"></property>
		<!-- 初始连接池大小 -->
		<property name="initialPoolSize" value="${mysql.initialPoolSize}"></property>
		<!-- 连接池中连接最小个数 -->
		<property name="minPoolSize" value="${mysql.minPoolSize}"></property>
		<!-- 连接池中连接最大个数 -->
		<property name="maxPoolSize" value="${mysql.maxPoolSize}"></property>
	</bean>

	<!--3 会话工厂bean sqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置文件路径 -->
		<property name="configLocation" value="classpath:MyBatisCfg.xml"></property>
		<!-- 数据源 -->
		<property name="dataSource" ref="datasource"></property>
		<!-- sql映射文件路径 -->
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"></property>
	</bean>

	<!--4 自动扫描对象关系映射 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<!-- 指定要自动扫描接口的基础包，实现接口 -->
		<property name="basePackage" value="com.citytuike.mapper"></property>
	</bean>
<!--5 声明式事务管理 -->
	<!--定义事物管理器，由spring管理事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"></property>
	</bean>
	<!--支持注解驱动的事务管理，指定事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--6 容器自动扫描IOC组件 -->
	<context:component-scan base-package="com.citytuike"></context:component-scan>

	<!--7 aspectj支持自动代理实现AOP功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

	<!--&lt;!&ndash; jedis 配置 &ndash;&gt;
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		&lt;!&ndash; 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 &ndash;&gt;
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="minIdle" value="${redis.minIdle}" />
		<property name="maxWaitMillis" value="${redis.maxWait}"/>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/>

	</bean>
	&lt;!&ndash; redis服务器中心 &ndash;&gt;
	<bean id="connectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="poolConfig" ref="poolConfig" />
		<property name="port" value="${redis.port}" />
		<property name="hostName" value="${redis.host}" />
		<property name="password" value="${redis.pass}" />
		<property name="timeout" value="${redis.timeout}" />
	</bean>
	&lt;!&ndash; redis操作模板，面向对象的模板 &ndash;&gt;
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		&lt;!&ndash; 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 &ndash;&gt;
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>-->
</beans>